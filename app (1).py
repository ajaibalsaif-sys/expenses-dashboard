import streamlit as st
import sqlite3
import pandas as pd
import plotly.express as px

# ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช ุฃู ุงูุงุชุตุงู ุจูุง
conn = sqlite3.connect("expenses.db")
c = conn.cursor()

# ุฅูุดุงุก ุงูุฌุฏุงูู ุฅุฐุง ูุง ูุงูุช ููุฌูุฏุฉ
c.execute("""CREATE TABLE IF NOT EXISTS records (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                company TEXT,
                expense REAL,
                sales REAL,
                purchases REAL
            )""")
conn.commit()

st.set_page_config(page_title="ููุญุฉ ุชุญูู ุนุฌุงุฆุจ ุงูุณูู", layout="wide")

st.title("๐ ููุญุฉ ุชุญูู ุดุฑูุฉ ุนุฌุงุฆุจ ุงูุณูู")

# ๐ข ุฅุฏุฎุงู ุงูุจูุงูุงุช
st.subheader("โ ุฅุฏุฎุงู ุจูุงูุงุช ุฌุฏูุฏุฉ")

with st.form("data_entry", clear_on_submit=True):
    date = st.date_input("๐ ุงูุชุงุฑูุฎ")
    company = st.text_input("๐ข ุงูุดุฑูุฉ")
    expense = st.number_input("๐ธ ุงููุตุฑููุงุช", min_value=0.0, step=0.1)
    sales = st.number_input("๐ฐ ุงููุจูุนุงุช", min_value=0.0, step=0.1)
    purchases = st.number_input("๐ ุงููุดุชุฑูุงุช", min_value=0.0, step=0.1)
    submitted = st.form_submit_button("๐พ ุญูุธ")

    if submitted:
        c.execute("INSERT INTO records (date, company, expense, sales, purchases) VALUES (?, ?, ?, ?, ?)",
                  (str(date), company, expense, sales, purchases))
        conn.commit()
        st.success("โ ุชู ุฅุถุงูุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")

# ๐ก ูุฑุงุกุฉ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
df = pd.read_sql("SELECT * FROM records", conn)

if not df.empty:
    st.subheader("๐ ุฌููุน ุงูุจูุงูุงุช")
    st.dataframe(df)

    # ๐น ุงูุญุณุงุจุงุช ุงูุนุงูุฉ
    total_sales = df["sales"].sum()
    total_expenses = df["expense"].sum()
    total_purchases = df["purchases"].sum()
    net_profit = total_sales - (total_expenses + total_purchases)

    # ๐น ุงููุณุจ
    expense_ratio = (total_expenses / total_sales * 100) if total_sales > 0 else 0
    profit_ratio = (net_profit / total_sales * 100) if total_sales > 0 else 0

    # ๐ข ุนุฑุถ ุงููุคุดุฑุงุช ุงูุฑุฆูุณูุฉ
    st.subheader("๐ ุงููุคุดุฑุงุช ุงูุฑุฆูุณูุฉ")
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("ุฅุฌูุงูู ุงููุจูุนุงุช", f"{total_sales:,.2f}")
    col2.metric("ุฅุฌูุงูู ุงููุตุฑููุงุช", f"{total_expenses:,.2f}")
    col3.metric("ุฅุฌูุงูู ุงููุดุชุฑูุงุช", f"{total_purchases:,.2f}")
    col4.metric("ุตุงูู ุงูุฑุจุญ", f"{net_profit:,.2f}")
    col5.metric("ูุณุจุฉ ุงููุตุฑููุงุช ูู ุงููุจูุนุงุช", f"{expense_ratio:.2f}%")

    st.metric("ูุณุจุฉ ุงูุฃุฑุจุงุญ ูู ุงููุจูุนุงุช", f"{profit_ratio:.2f}%")

    # ๐ฃ ุงูุฑุณููุงุช ุงูุจูุงููุฉ
    st.subheader("๐ ุงูุชุญูููุงุช")
    fig1 = px.bar(df, x="date", y=["sales", "expense", "purchases"], barmode="group",
                  title="ุงููุจูุนุงุช ูุงููุตุฑููุงุช ูุงููุดุชุฑูุงุช ุญุณุจ ุงูุชุงุฑูุฎ")
    st.plotly_chart(fig1, use_container_width=True)

    fig2 = px.pie(names=["ูุตุฑููุงุช", "ูุดุชุฑูุงุช", "ุตุงูู ุงูุฑุจุญ"],
                  values=[total_expenses, total_purchases, net_profit],
                  title="ูุณุจุฉ ุชูุฒูุน ุงููุตุฑููุงุช ูุงููุดุชุฑูุงุช ูุตุงูู ุงูุฑุจุญ")
    st.plotly_chart(fig2, use_container_width=True)

else:
    st.info("โน๏ธ ูู ูุชู ุฅุฏุฎุงู ุฃู ุจูุงูุงุช ุญุชู ุงูุขู.")
